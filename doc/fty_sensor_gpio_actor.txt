fty_sensor_gpio_actor(3)
========================

NAME
----
fty_sensor_gpio_actor - Class for 42ITy GPIO alerts handler

SYNOPSIS
--------
----
//  Create a new fty_sensor_gpio_actor
FTY_SENSOR_GPIO_EXPORT fty_sensor_gpio_actor_t *
    fty_sensor_gpio_actor_new (void);

//  Destroy the fty_sensor_gpio_actor
FTY_SENSOR_GPIO_EXPORT void
    fty_sensor_gpio_actor_destroy (fty_sensor_gpio_actor_t **self_p);

//  Self test of this class
FTY_SENSOR_GPIO_EXPORT void
    fty_sensor_gpio_actor_test (bool verbose);

Please add '@interface' section in './../src/fty_sensor_gpio_actor.cc'.
----

DESCRIPTION
-----------

fty_sensor_gpio_actor - 42ITy GPIO alerts handler

Please add '@discuss' section in './../src/fty_sensor_gpio_actor.cc'.

EXAMPLE
-------
.From fty_sensor_gpio_actor_test method
----
//  Simple create/destroy test

// Note: If your selftest reads SCMed fixture data, please keep it in
// src/selftest-ro; if your test creates filesystem objects, please
// do so under src/selftest-rw. They are defined below along with a
// usecase for the variables (assert) to make compilers happy.
const char *SELFTEST_DIR_RO = "src/selftest-ro";
const char *SELFTEST_DIR_RW = "src/selftest-rw";
assert (SELFTEST_DIR_RO);
assert (SELFTEST_DIR_RW);
// Uncomment these to use C++ strings in C++ selftest code:
//std::string str_SELFTEST_DIR_RO = std::string(SELFTEST_DIR_RO);
//std::string str_SELFTEST_DIR_RW = std::string(SELFTEST_DIR_RW);
//assert ( (str_SELFTEST_DIR_RO != "") );
//assert ( (str_SELFTEST_DIR_RW != "") );
// NOTE that for "char*" context you need (str_SELFTEST_DIR_RO + "/myfilename").c_str()

fty_sensor_gpio_actor_t *self = fty_sensor_gpio_actor_new ();
assert (self);
fty_sensor_gpio_actor_destroy (&self);
----
